{"id":"node_modules/autolinker/dist/es2015/match/match.js","dependencies":[{"name":"/Users/evinsellin/code/homepage/node_modules/autolinker/dist/es2015/match/match.js.map","includedInParent":true,"mtime":1618113243145},{"name":"/Users/evinsellin/code/homepage/package.json","includedInParent":true,"mtime":1618121883607},{"name":"/Users/evinsellin/code/homepage/.babelrc","includedInParent":true,"mtime":1618113312087},{"name":"/Users/evinsellin/code/homepage/node_modules/autolinker/package.json","includedInParent":true,"mtime":1618113243145}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Match = void 0;\n\n/**\n * @abstract\n * @class Autolinker.match.Match\n *\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *\n *                 case 'mention' :\n *                     console.log( \"mention: \", match.getMention() );\n *             }\n *         }\n *     } );\n *\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nvar Match =\n/** @class */\nfunction () {\n  /**\n   * @member Autolinker.match.Match\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function Match(cfg) {\n    /**\n     * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n     *\n     * Reference to the AnchorTagBuilder instance to use to generate an anchor\n     * tag for the Match.\n     */\n    this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} matchedText (required)\n     *\n     * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n     */\n\n    this.matchedText = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Number} offset (required)\n     *\n     * The offset of where the match was made in the input string.\n     */\n\n    this.offset = 0; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    this.tagBuilder = cfg.tagBuilder;\n    this.matchedText = cfg.matchedText;\n    this.offset = cfg.offset;\n  }\n  /**\n   * Returns the original text that was matched.\n   *\n   * @return {String}\n   */\n\n\n  Match.prototype.getMatchedText = function () {\n    return this.matchedText;\n  };\n  /**\n   * Sets the {@link #offset} of where the match was made in the input string.\n   *\n   * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n   * and will therefore set an original offset that is relative to the HTML\n   * text node itself. However, we want this offset to be relative to the full\n   * HTML input string, and thus if using {@link Autolinker#parse} (rather\n   * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n   * offset is corrected after the Matcher itself has done its job.\n   *\n   * @param {Number} offset\n   */\n\n\n  Match.prototype.setOffset = function (offset) {\n    this.offset = offset;\n  };\n  /**\n   * Returns the offset of where the match was made in the input string. This\n   * is the 0-based index of the match.\n   *\n   * @return {Number}\n   */\n\n\n  Match.prototype.getOffset = function () {\n    return this.offset;\n  };\n  /**\n   * Returns the CSS class suffix(es) for this match.\n   *\n   * A CSS class suffix is appended to the {@link Autolinker#className} in\n   * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n   * an anchor tag.\n   *\n   * For example, if {@link Autolinker#className} was configured as 'myLink',\n   * and this method returns `[ 'url' ]`, the final class name of the element\n   * will become: 'myLink myLink-url'.\n   *\n   * The match may provide multiple CSS class suffixes to be appended to the\n   * {@link Autolinker#className} in order to facilitate better styling\n   * options for different match criteria. See {@link Autolinker.match.Mention}\n   * for an example.\n   *\n   * By default, this method returns a single array with the match's\n   * {@link #getType type} name, but may be overridden by subclasses.\n   *\n   * @return {String[]}\n   */\n\n\n  Match.prototype.getCssClassSuffixes = function () {\n    return [this.getType()];\n  };\n  /**\n   * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n   * Match.\n   *\n   * This can be used to easily generate anchor tags from matches, and either\n   * return their HTML string, or modify them before doing so.\n   *\n   * Example Usage:\n   *\n   *     var tag = match.buildTag();\n   *     tag.addClass( 'cordova-link' );\n   *     tag.setAttr( 'target', '_system' );\n   *\n   *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n   *\n   * Example Usage in {@link Autolinker#replaceFn}:\n   *\n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( match ) {\n   *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *\n   *             return tag;\n   *         }\n   *     } );\n   *\n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   */\n\n\n  Match.prototype.buildTag = function () {\n    return this.tagBuilder.build(this);\n  };\n\n  return Match;\n}();\n\nexports.Match = Match;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/match/match.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":39,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":39,"column":4}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":39,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":40,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":41,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":41,"column":12}},{"source":"../src/match/match.ts","name":null,"original":{"line":62,"column":1},"generated":{"line":42,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":48,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":48,"column":11}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":48,"column":16}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":14},"generated":{"line":48,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":48,"column":20}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":30},"generated":{"line":48,"column":22}},{"source":"../src/match/match.ts","name":null,"original":{"line":36,"column":1},"generated":{"line":49,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":55,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":55,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":55,"column":29}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":32},"generated":{"line":55,"column":32}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":55,"column":36}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":30},"generated":{"line":55,"column":37}},{"source":"../src/match/match.ts","name":null,"original":{"line":42,"column":39},"generated":{"line":55,"column":38}},{"source":"../src/match/match.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":57,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":63,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":63,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":63,"column":20}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":42},"generated":{"line":63,"column":23}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":63,"column":25}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":30},"generated":{"line":63,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":52,"column":47},"generated":{"line":63,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":54,"column":1},"generated":{"line":65,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":9},"generated":{"line":71,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":9},"generated":{"line":71,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":9},"generated":{"line":71,"column":15}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":26},"generated":{"line":71,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":9},"generated":{"line":71,"column":19}},{"source":"../src/match/match.ts","name":null,"original":{"line":68,"column":30},"generated":{"line":71,"column":20}},{"source":"../src/match/match.ts","name":null,"original":{"line":59,"column":30},"generated":{"line":71,"column":21}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":73,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":7},"generated":{"line":73,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":73,"column":19}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":20},"generated":{"line":73,"column":22}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":23},"generated":{"line":73,"column":25}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":24},"generated":{"line":73,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":73,"column":36}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":2},"generated":{"line":74,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":7},"generated":{"line":74,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":2},"generated":{"line":74,"column":20}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":21},"generated":{"line":74,"column":23}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":24},"generated":{"line":74,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":25},"generated":{"line":74,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":70,"column":2},"generated":{"line":74,"column":38}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":75,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":7},"generated":{"line":75,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":75,"column":15}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":16},"generated":{"line":75,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":19},"generated":{"line":75,"column":21}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":20},"generated":{"line":75,"column":22}},{"source":"../src/match/match.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":75,"column":28}},{"source":"../src/match/match.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":76,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":77,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":2}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":7}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":8}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":32}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":35}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":84,"column":47}},{"source":"../src/match/match.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":85,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":90,"column":9},"generated":{"line":85,"column":11}},{"source":"../src/match/match.ts","name":null,"original":{"line":90,"column":14},"generated":{"line":85,"column":16}},{"source":"../src/match/match.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":85,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":86,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":89,"column":1},"generated":{"line":86,"column":3}},{"source":"../src/match/match.ts","name":null,"original":{"line":94,"column":1},"generated":{"line":87,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":2}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":7}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":8}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":30}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":12},"generated":{"line":101,"column":40}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":101,"column":46}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":26},"generated":{"line":101,"column":48}},{"source":"../src/match/match.ts","name":null,"original":{"line":107,"column":2},"generated":{"line":102,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":107,"column":7},"generated":{"line":102,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":107,"column":2},"generated":{"line":102,"column":15}},{"source":"../src/match/match.ts","name":null,"original":{"line":107,"column":16},"generated":{"line":102,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":107,"column":2},"generated":{"line":102,"column":24}},{"source":"../src/match/match.ts","name":null,"original":{"line":108,"column":2},"generated":{"line":103,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":106,"column":1},"generated":{"line":103,"column":3}},{"source":"../src/match/match.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":104,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":2}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":7}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":8}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":30}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":112,"column":42}},{"source":"../src/match/match.ts","name":null,"original":{"line":118,"column":2},"generated":{"line":113,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":118,"column":9},"generated":{"line":113,"column":11}},{"source":"../src/match/match.ts","name":null,"original":{"line":118,"column":14},"generated":{"line":113,"column":16}},{"source":"../src/match/match.ts","name":null,"original":{"line":118,"column":2},"generated":{"line":113,"column":22}},{"source":"../src/match/match.ts","name":null,"original":{"line":119,"column":2},"generated":{"line":114,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":114,"column":3}},{"source":"../src/match/match.ts","name":null,"original":{"line":140,"column":1},"generated":{"line":115,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":2}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":7}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":8}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":37}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":40}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":138,"column":52}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":2},"generated":{"line":139,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":9},"generated":{"line":139,"column":11}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":11},"generated":{"line":139,"column":12}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":16},"generated":{"line":139,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":11},"generated":{"line":139,"column":24}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":9},"generated":{"line":139,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":162,"column":2},"generated":{"line":139,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":163,"column":2},"generated":{"line":140,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":161,"column":1},"generated":{"line":140,"column":3}},{"source":"../src/match/match.ts","name":null,"original":{"line":166,"column":1},"generated":{"line":141,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":2}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":7}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":8}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":17}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":18}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":29}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":172,"column":41}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":2},"generated":{"line":173,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":173,"column":11}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":14},"generated":{"line":173,"column":16}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":173,"column":26}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":25},"generated":{"line":173,"column":27}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":173,"column":32}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":32},"generated":{"line":173,"column":33}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":173,"column":37}},{"source":"../src/match/match.ts","name":null,"original":{"line":196,"column":2},"generated":{"line":173,"column":38}},{"source":"../src/match/match.ts","name":null,"original":{"line":197,"column":2},"generated":{"line":174,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":195,"column":1},"generated":{"line":174,"column":3}},{"source":"../src/match/match.ts","name":null,"original":{"line":199,"column":0},"generated":{"line":176,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":199,"column":0},"generated":{"line":176,"column":9}},{"source":"../src/match/match.ts","name":null,"original":{"line":199,"column":0},"generated":{"line":176,"column":14}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":177,"column":0}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":177,"column":1}},{"source":"../src/match/match.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":177,"column":3}}],"sources":{"../src/match/match.ts":"import { AnchorTagBuilder } from \"../anchor-tag-builder\";\n\n/**\n * @abstract\n * @class Autolinker.match.Match\n *\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *\n *                 case 'mention' :\n *                     console.log( \"mention: \", match.getMention() );\n *             }\n *         }\n *     } );\n *\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nexport abstract class Match {\n\n\t/**\n\t * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n\t *\n\t * Reference to the AnchorTagBuilder instance to use to generate an anchor\n\t * tag for the Match.\n\t */\n\tprivate __jsduckDummyDocProp = null;  // property used just to get the above doc comment into the ES5 output and documentation generator\n\n\t// Actual property for the above jsdoc comment\n\tprivate readonly tagBuilder: AnchorTagBuilder;\n\n\t/**\n\t * @cfg {String} matchedText (required)\n\t *\n\t * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n\t */\n\tprotected readonly matchedText: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Number} offset (required)\n\t *\n\t * The offset of where the match was made in the input string.\n\t */\n\tprivate offset: number = 0;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @member Autolinker.match.Match\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: MatchConfig ) {\n\t\tthis.tagBuilder = cfg.tagBuilder;\n\t\tthis.matchedText = cfg.matchedText;\n\t\tthis.offset = cfg.offset;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getType(): string;\n\n\n\t/**\n\t * Returns the original text that was matched.\n\t *\n\t * @return {String}\n\t */\n\tgetMatchedText() {\n\t\treturn this.matchedText;\n\t}\n\n\n\t/**\n\t * Sets the {@link #offset} of where the match was made in the input string.\n\t *\n\t * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n\t * and will therefore set an original offset that is relative to the HTML\n\t * text node itself. However, we want this offset to be relative to the full\n\t * HTML input string, and thus if using {@link Autolinker#parse} (rather\n\t * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n\t * offset is corrected after the Matcher itself has done its job.\n\t *\n\t * @param {Number} offset\n\t */\n\tsetOffset( offset: number ) {\n\t\tthis.offset = offset;\n\t}\n\n\n\t/**\n\t * Returns the offset of where the match was made in the input string. This\n\t * is the 0-based index of the match.\n\t *\n\t * @return {Number}\n\t */\n\tgetOffset() {\n\t\treturn this.offset;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getAnchorHref(): string;\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getAnchorText(): string;\n\n\n\t/**\n\t * Returns the CSS class suffix(es) for this match.\n\t *\n\t * A CSS class suffix is appended to the {@link Autolinker#className} in\n\t * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n\t * an anchor tag.\n\t *\n\t * For example, if {@link Autolinker#className} was configured as 'myLink',\n\t * and this method returns `[ 'url' ]`, the final class name of the element\n\t * will become: 'myLink myLink-url'.\n\t *\n\t * The match may provide multiple CSS class suffixes to be appended to the\n\t * {@link Autolinker#className} in order to facilitate better styling\n\t * options for different match criteria. See {@link Autolinker.match.Mention}\n\t * for an example.\n\t *\n\t * By default, this method returns a single array with the match's\n\t * {@link #getType type} name, but may be overridden by subclasses.\n\t *\n\t * @return {String[]}\n\t */\n\tgetCssClassSuffixes() {\n\t\treturn [ this.getType() ];\n\t}\n\n\n\t/**\n\t * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n\t * Match.\n\t *\n\t * This can be used to easily generate anchor tags from matches, and either\n\t * return their HTML string, or modify them before doing so.\n\t *\n\t * Example Usage:\n\t *\n\t *     var tag = match.buildTag();\n\t *     tag.addClass( 'cordova-link' );\n\t *     tag.setAttr( 'target', '_system' );\n\t *\n\t *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n\t * \n\t * Example Usage in {@link Autolinker#replaceFn}:\n\t *\n\t *     var html = Autolinker.link( \"Test google.com\", {\n\t *         replaceFn : function( match ) {\n\t *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n\t *             tag.setAttr( 'rel', 'nofollow' );\n\t *\n\t *             return tag;\n\t *         }\n\t *     } );\n\t *\n\t *     // generated html:\n\t *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n\t */\n\tbuildTag() {\n\t\treturn this.tagBuilder.build( this );\n\t}\n\n}\n\nexport interface MatchConfig {\n\ttagBuilder: AnchorTagBuilder;\n\tmatchedText: string;\n\toffset: number;\n}\n"},"lineCount":null}},"error":null,"hash":"930cca078fe9c8c5961bc26c62e4c334","cacheData":{"env":{}}}